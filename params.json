{"name":"KeyderJS","tagline":"KeyderJS is a simple, yet powerful, JavaScript event library.","body":"KeyderJS\r\n======\r\n\r\nKeyderJS is a JavaScript event library.\r\n\r\nFast, Easy and Small\r\n--------------------\r\n\r\nWith the minified version only 10kb KeyderJS is as fast as light, small as an electron and easy as apple pie.\r\n\r\nCross-Browser\r\n-------------\r\n\r\nKeyderJS is also cross-browser and has been tested in:\r\n\r\n- Internet Explorer 6+\r\n- Google Chrome\r\n- Opera 11\r\n- Firefox 4+\r\n- Yandex.Browser Alpha\r\n\r\nNote: KeyderJS may work in other or older browsers\r\n\r\nInstallation\r\n============\r\n\r\nKeyderJS installation is as simple as 123:\r\n\r\nUsing Bower\r\n-----------\r\n\r\nDo the following in your command line:\r\n\r\n    bower install keyderjs\r\n\r\nOr Adding the `keyder.js` script\r\n-----------------------------\r\n\r\nAdd the KeyderJS script file to your head section in your HTML file. Example:\r\n\r\n\t<script src='path/to/keyder.min.js' type='text/javascript'></script>\r\n\r\nUsage\r\n=====\r\n\r\nKeyder is used as following\r\n\r\n\tKeyder( element ).eventName( handler [, second_handler] )\r\n\r\nThe `second_handler` parameter is optional and only supported for the `hover` and `click` events.\r\n\r\nThe `second_handler` parameter for the click event is used instead of `mouseup` and for the hover event it is used instead of `mouseleave`. See more details in the [examples](#examples) \r\n\r\nThe keydown and keyup events are a bit different and used like this:\r\n\r\n\tKeyder( element ).keydown( keycode/keyname, handler )\r\n\r\nExamples\r\n========\r\n\r\nExample 1: a simple mousedown event\r\n--\r\n\r\n\tKeyder( document.getElementById( \"my_element\" ) ).mousedown( function(){\r\n\t\tconsole.log( \"Mousedown\" );\r\n\t});\r\n\t\r\nExample 2: a click event with two handlers\r\n--\r\n\r\n\tKeyder( document.getElementById( \"my_element\" ) ).click( function(){\r\n\t\tconsole.log( \"The mouse button was pressed\" );\r\n\t}, function(){\r\n\t\tconsole.log( \"The mouse button was released\" );\r\n\t});\r\n\t\r\nExample 3: a simple chained keydown/keyup event\r\n--\r\n\r\n\tKeyder( document.getElementById( \"my_element\" ) ).keydown( \"shift\", function(){\r\n\t\tconsole.log( \"The Shift key was pressed\" );\r\n\t} ).keyup( \"shift\", function(){\r\n\t\tconsole.log( \"The Shift key was released\" );\r\n\t} );\r\n\r\nExample 4: a simple handler for multiple events\r\n\r\n\tKeyder( document.getElementById( \"my_element\" ) ).on( \"click mouseover\", function(){\r\n\t\tconsole.log( \"You did: \" + e.currentEvent );\r\n\t} );\r\n\r\nAdvanced Features\r\n=====\r\n\r\nPrevent autorepeated keydown events\r\n---\r\n\r\nSometimes when the user holds down a key it fires the event repeatedly. To fix this, add a third parameter to the keydown event and set it to `true`. Example:\r\n\r\n\tKeyder( document.getElementById( \"my_element\" ) ).keydown( \"shift\", function(){\r\n\t\tconsole.log( \"The Shift key was pressed, but the event won't be fired repeatedly and the event handler won't be executed repeatedly when you hold down the Shift key!\" );\r\n\t}, true );\r\n\r\nSee [this question](http://stackoverflow.com/questions/7686197/how-can-i-avoid-autorepeated-keydown-events-in-javascript) on Stackoverflow to see what I mean.\r\n\r\nGet current key name\r\n---\r\n\r\nSometimes when a user pressed a key you would want to get the keyname of the pressed key. That could be easily done by using `event.keyName`, almost like `event.keyCode`, but it gives the name of the pressed key and not the code. Example:\r\n\r\n\tKeyder( document.getElementById( \"my_element\" ) ).keydown( \"any\", function(event){\r\n\t\tconsole.log( \"You pressed the \" + event.keyName + \"key.\" );\r\n\t} );\r\n\r\nNote: if you want to get the last pressed and handled key you would use `Keyder().lastKey`\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}